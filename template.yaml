AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Cross post blogs to Medium, Dev.to, and Hashnode triggered by a successful Amplify build

Parameters:
  TableName:
    Type: String
    Default: blog
  GSI1:
    Type: String
    Default: GSI1
  GitHubPAT:
    Type: String
    Description: PAT to load blog markdown content from your repository
  GitHubOwner:
    Type: String
    Description: Owner's username of the GitHub repository that holds blog content
  GitHubRepo:
    Type: String
    Description: Repository name of the blog
  AmplifyProjectId:
    Type: String
    Description: Identifier of the Amplify project that triggers the cross-posting
  MediumApiKey:
    Type: String
    Description: API key used to manipulate data in your Medium account
  MediumPublicationId:
    Type: String
    Description: Identifier of the publication you wish to submit to on Medium
    Default: ''
  MediumAuthorId:
    Type: String
    Description: Identifier of your user on Medium
    Default: ''
  DevApiKey:
    Type: String
    Description: API key used to manipulate data in your Dev.to account
  DevOrganizationId:
    Type: String
    Description: Identifier of the publication you wish to submit to on Dev.to
    Default: ''
  HashnodeApiKey:
    Type: String 
    Description: API key used to manipulate data in your Hashnode account
  HashnodePublicationId:
    Type: String
    Description: Identifier for your blog publication on Hashnode
  HashnodeBlogUrl:
    Type: String
    Description: Base url of your blog hosted in Hashnode
  BlogBaseUrl:
    Type: String
    Description: Base url of your blog on your personal site
  BlogContentPath:
    Type: String
    Description: Relative path from the root directory to the blog content folder in your GitHub repo
  SendgridApiKey:
    Type: String
    Default: ''
    Description: Api Key of the SendGrid account that will send the status report when cross-posting is complete
  NotificationEmail:
    Type: String
    Default: ''
    Description: Email address to notify when cross posting is complete
  SendgridFromEmail:
    Type: String
    Default: ''
    Description: Email address for SendGrid that sends you the status email

Conditions:
  ShouldSendStatusEmail:
    !Not [!Equals [ !Ref SendgridApiKey, '']]
  PostToMediumPublication:
    !Not [!Equals [!Ref MediumPublicationId, '']]

Globals:
  Function:
    Runtime: nodejs14.x #set to this because Amplify build image has SAM version that supports up to 14
    Architectures:
      - arm64
    Tracing: Active
    Timeout: 15
    MemorySize: 1024
    Handler: index.handler
    Layers:
      - !Ref SharedLayer
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

Resources:
  BlogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST      
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: !Ref GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: nodejs14.x
      BuildArchitecture: arm64
    Properties:
      ContentUri: layers/
      CompatibleRuntimes:
        - nodejs14.x

  ParsePostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/parse-post
      Policies:
        - AWSLambdaBasicExecutionRole
      Environment:
        Variables:
          BLOG_BASE_URL: !Ref BlogBaseUrl          
          HASHNODE_PUBLICATION_ID: !Ref HashnodePublicationId
          DEV_ORG_ID: !Ref DevOrganizationId

  SendApiRequestFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/send-api-request
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref AuthTokensSecret
      Environment:
        Variables:
          SECRET_ID: !Ref AuthTokensSecret

  AuthTokensSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString:
        Fn::Sub:
          - |-
            {
              "medium": "${MediumApiKey}",
              "dev": "${DevApiKey}",
              "hashnode": "${HashnodeApiKey}",
              "github": "${GitHubPAT}",
              "sendgrid":"${SengridApiKey}"
            }
          - MediumApiKey: !Ref MediumApiKey
            DevApiKey: !Ref DevApiKey
            HashnodeApiKey: !Ref HashnodeApiKey
            GitHubPAT: !Ref GitHubPAT
            SengridApiKey: !Ref SendgridApiKey

  LoadCrossPostsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/load-cross-posts
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt BlogTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName

  IdentifyNewArticlesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/identify-new-content
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref AuthTokensSecret
            - Effect: Allow
              Action:
                - states:StartExecution
              Resource: 
                - !Ref CrossPostStateMachine
      Environment:
        Variables:
          SECRET_ID: !Ref AuthTokensSecret
          OWNER: !Ref GitHubOwner
          REPO: !Ref GitHubRepo
          COMMIT_TIME_TOLERANCE_MINUTES: 10
          STATE_MACHINE_ARN: !Ref CrossPostStateMachine
          CONTENT_PATH: !Ref BlogContentPath
          NEW_CONTENT_INDICATOR: "[blog]"
          SEND_STATUS_EMAIL: !If [ShouldSendStatusEmail, 'true', 'false']
      Events:
        AmplifyBuildSuccessful:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - aws.amplify
              detail-type:
                - Amplify Deployment Status Change
              detail:
                appId: 
                  - !Ref AmplifyProjectId
                jobStatus:
                  - SUCCEED

  CrossPostStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      DefinitionUri: workflows/cross-post.asl.json
      DefinitionSubstitutions:
        DynamodbGetItem: !Sub arn:${AWS::Partition}:states:::dynamodb:getItem
        TableName: !Ref TableName
        DynamodbPutItem: !Sub arn:${AWS::Partition}:states:::dynamodb:putItem
        DynamodbQuery: !Sub arn:${AWS::Partition}:states:::aws-sdk:dynamodb:query
        IndexName: !Ref GSI1
        DynamodbUpdateItem: !Sub arn:${AWS::Partition}:states:::dynamodb:updateItem
        LambdaInvoke: !Sub arn:${AWS::Partition}:states:::lambda:invoke
        ParsePostFunction: !GetAtt ParsePostFunction.Arn
        SendApiRequestFunction: !GetAtt SendApiRequestFunction.Arn
        AdminEmail: !Ref NotificationEmail
        HashnodeBlogUrl: !Ref HashnodeBlogUrl
        EventBridgePutEvents: !Sub arn:${AWS::Partition}:states:::events:putEvents
        ExecutionUrl: !Sub https://${AWS::Region}.console.${AWS::Partition}.amazon.com/states/home?region=${AWS::Region}#/v2/executions/details
        MediumUrl: !If [ PostToMediumPublication, !Sub 'https://api.medium.com/v1/publications/${MediumPublicationId}/posts', !Sub 'https://api.medium.com/v1/users/${MediumAuthorId}/posts' ]
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:getItem
                - dynamodb:putItem
                - dynamodb:updateItem
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}
            - Effect: Allow
              Action:
                - dynamodb:query
              Resource:
                - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}/index/${GSI1}
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt ParsePostFunction.Arn
                - !GetAtt SendApiRequestFunction.Arn
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource:
                - !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default

  SendEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/send-email-sendgrid
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref AuthTokensSecret
      Environment:
        Variables:
          SECRET_ID: !Ref AuthTokensSecret
          FROM_EMAIL: !Ref SendgridFromEmail
      Events:
        SendMailEvent:
          Type: EventBridgeRule
          Properties:
            Pattern:
              detail-type:
                - Send Email
